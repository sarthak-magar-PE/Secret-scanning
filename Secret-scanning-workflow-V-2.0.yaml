name: Scan for Secrets with TruffleHog Docker

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronized
      - closed

jobs:
  scan-secrets:
    runs-on: [self-hosted, linux]
    timeout-minutes: 30
    steps: 
      - name: Checkout code (clone repository)
        uses: actions/checkout@v4

      # - name: Create exclude paths file
      #   run: echo '^node_modules/' > "$GITHUB_WORKSPACE/exclude_paths.txt"
        
      - name: Run TruffleHog Scan
        run: |
          # Run the scan on the checked-out repository
          docker run --rm -v "$GITHUB_WORKSPACE:/pwd" trufflesecurity/trufflehog:latest git file:///pwd --json > trufflehog_output.json || true
          
          # Filter results for verification
          grep 'SourceMetadata' trufflehog_output.json > cleaned_trufflehog_output.json || true 

          if [ ! -s cleaned_trufflehog_output.json ]; then
            echo "No secrets found, exiting workflow."
            exit 0
          fi
          
          cat cleaned_trufflehog_output.json || true

      - name: Upload cleaned output
        uses: actions/upload-artifact@v4
        with:
          name: cleaned-trufflehog-output
          path: cleaned_trufflehog_output.json

  check-existing-issues:
    runs-on: [self-hosted, linux]
    needs: scan-secrets
    if: success()
    steps:
      - name: Download cleaned output
        uses: actions/download-artifact@v4
        with:
          name: cleaned-trufflehog-output
  
      - name: Check for Existing Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -s cleaned_trufflehog_output.json ]; then
            ISSUES=$(cat cleaned_trufflehog_output.json | jq -r '.SourceMetadata.Data.Git.commit, .SourceMetadata.Data.Git.file, .SourceMetadata.Data.Git.repository, .SourceMetadata.Data.Git.email, .SourceMetadata.Data.Git.line' | paste - - - - -)
            NEW_ISSUES=""
            
            while IFS=$'\t' read -r COMMIT FILE REPOSITORY EMAIL LINE; do
              if [[ -n "$COMMIT" ]]; then
                # Extract just the repository name from the full Git URL
                CLEAN_REPOSITORY=$(basename -s .git "$REPOSITORY")
                EXISTING_ISSUE=$(gh issue list --state open --json title --jq ".[] | select(.title | contains(\"$COMMIT\")) | .title")
                if [[ -z "$EXISTING_ISSUE" ]]; then
                  echo "No existing issue for Commit: $COMMIT. Adding to new issues."
                  NEW_ISSUES+="$COMMIT,$FILE,$CLEAN_REPOSITORY,$EMAIL,$LINE"$'\n'
                else
                  echo "Issue already exists for Commit: $COMMIT. Skipping."
                fi
              fi
            done <<< "$ISSUES"

            if [[ -n "$NEW_ISSUES" ]]; then
              echo "$NEW_ISSUES" > cleaned_new_trufflehog_output.json
            else
              echo "No new issues to create." > no_new_issues.json
            fi
          else
            echo "cleaned_trufflehog_output.json is empty or not found!"
            exit 0
          fi

      - name: Upload new issues
        uses: actions/upload-artifact@v4
        with:
          name: new-issues
          path: cleaned_new_trufflehog_output.json 
          if-no-files-found: ignore

  create-issues:
    runs-on: [self-hosted, linux]
    needs: check-existing-issues  
    if: success()  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download new issues artifact
        uses: actions/download-artifact@v4
        with:
          name: new-issues
        continue-on-error: true

      - name: Check if artifact was downloaded
        run: |
          if [ ! -f cleaned_new_trufflehog_output.json ]; then
            echo "Artifact 'new-issues' not found. No new issues to create."
            exit 0
          fi
  
      - name: Create GitHub Issues and Save Jira Data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create or empty a file to store Jira data (CSV format: commit,file,repository,email,line,issue_url)
          > jira_data.txt
          if [ -s cleaned_new_trufflehog_output.json ]; then
            while IFS=',' read -r COMMIT FILE REPOSITORY EMAIL LINE; do
              if [[ -n "$COMMIT" && -n "$FILE" && -n "$REPOSITORY" && -n "$EMAIL" && -n "$LINE" ]]; then
                echo "Creating issue for Commit: $COMMIT"
                # Create the GitHub issue. (Remove --json flag since it’s unsupported.)
                ISSUE_URL=$(gh issue create \
                  --title "Secrets identified - Commit $COMMIT" \
                  --body "**Details:**  
                    **Commit ID:** https://github.com/pharmeasy/$REPOSITORY/commit/$COMMIT/$FILE#L$LINE  
                    **File Containing Secrets:** $FILE  
                    **Line Containing Issue:** $LINE  
                    **Repository:** $REPOSITORY  
                    **Committed By:** $EMAIL  
                    Steps to follow:
                    1. Rotate the Keys which were being used
                    2. Remove the Secrets Identified from codebase
                    3. Use void (.env) file to store your secrets.")
                echo "GitHub Issue Created: $ISSUE_URL"
                
                curl -X POST "${{ secrets.GCHAT_WEBHOOK_URL }}" \
                  -H "Content-Type: application/json" \
                  -d '{
                    "text": "*New Secret Issue Created*
                    *Commit ID:* '"https://github.com/pharmeasy/$REPOSITORY/commit/$COMMIT/$FILE#L$LINE "'
                    *File:* '"$FILE"'
                    *Line:* '"$LINE"'
                    *Repository:* '"$REPOSITORY"'
                    *Committed By:* '"$EMAIL"'
                    Please check and resolve."
                  }'
                
                # Save details for Jira ticket creation
                echo "$COMMIT,$FILE,$REPOSITORY,$EMAIL,$LINE,$ISSUE_URL" >> jira_data.txt
              else
                echo "Skipping issue creation due to missing data."
              fi
            done < cleaned_new_trufflehog_output.json
          else
            echo "cleaned_new_trufflehog_output.json is empty or not found! No issues to create."
            exit 0
          fi

      - name: Upload Jira Data
        uses: actions/upload-artifact@v4
        with:
          name: jira-data
          path: jira_data.txt

  create-jira-ticket:
    runs-on: [self-hosted, linux]
    needs: create-issues
    if: success()
    steps:
      - name: Download Jira Data Artifact
        uses: actions/download-artifact@v4
        with:
          name: jira-data

      - name: Create Jira Tickets
        run: |
          if [ ! -f jira_data.txt ]; then
            echo "No Jira data found. Exiting."
            exit 0
          fi

          # Define a blacklist of committer emails that should not be assigned.
          BLACKLIST_EMAILS=("om.boke@pharmeasy.in" "amit.kumar@pharmeasy.in")
          
          # Load the repo-owner mapping file.
          # Each line should be: repoName,ownerEmail
          declare -A repo_owner_map
          if [ -f /opt/actions-runner/secret_scanning_mapping/repo_owner_mapping.txt ]; then
            while IFS=',' read -r repo ownerEmail; do
              repo=$(echo "$repo" | xargs)
              ownerEmail=$(echo "$ownerEmail" | xargs)
              if [[ -n "$repo" && -n "$ownerEmail" ]]; then
                repo_owner_map["$repo"]="$ownerEmail"
              fi
            done < /opt/actions-runner/secret_scanning_mapping/repo_owner_mapping.txt
          else
            echo "No repo-owner mapping file found. Fallback will leave assignee empty."
          fi

          while IFS=',' read -r COMMIT FILE REPOSITORY EMAIL LINE ISSUE_URL; do
            # Trim whitespace for each field.
            COMMIT=$(echo "$COMMIT" | xargs)
            FILE=$(echo "$FILE" | xargs)
            REPOSITORY=$(echo "$REPOSITORY" | xargs)
            EMAIL=$(echo "$EMAIL" | xargs)
            LINE=$(echo "$LINE" | xargs)
            ISSUE_URL=$(echo "$ISSUE_URL" | xargs)
            
            # Extract only the email address from "Name <email>".
            CLEAN_EMAIL=$(echo "$EMAIL" | sed -E 's/.*<([^>]+)>.*/\1/')
            
            # Debug: print the fields.
            echo "Processing commit: $COMMIT"
            echo "FILE: $FILE"
            echo "REPOSITORY: $REPOSITORY"
            echo "EMAIL: $EMAIL"
            echo "CLEAN_EMAIL: $CLEAN_EMAIL"
            echo "LINE: $LINE"
            echo "ISSUE_URL: $ISSUE_URL"
            
            if [[ -n "$COMMIT" && -n "$FILE" && -n "$REPOSITORY" && -n "$CLEAN_EMAIL" && -n "$LINE" && -n "$ISSUE_URL" ]]; then
            # Instead of using the committer’s account, we check if there is a mapping for the repository.
            ASSIGN_TO=""
            if [ -n "${repo_owner_map[$REPOSITORY]}" ]; then
              OWNER_EMAIL="${repo_owner_map[$REPOSITORY]}"
              echo "Found mapping for repository $REPOSITORY: Owner email $OWNER_EMAIL"
              OWNER_RESPONSE=$(curl --silent --request GET \
                --url "${{ secrets.JIRA_URL }}/rest/api/3/user/search?query=${OWNER_EMAIL}" \
                --user "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
                --header "Accept: application/json")
              OWNER_ACCOUNT_ID=$(echo "$OWNER_RESPONSE" | jq -r '.[0].accountId')
              if [ -n "$OWNER_ACCOUNT_ID" ] && [ "$OWNER_ACCOUNT_ID" != "null" ]; then
                ASSIGN_TO="$OWNER_ACCOUNT_ID"
                echo "Assigning ticket to repo owner accountId: $ASSIGN_TO"
              else
                echo "Unable to fetch account ID for owner email $OWNER_EMAIL. Ticket will be created unassigned."
              fi
            else
              echo "No mapping found for repository $REPOSITORY. Ticket will be created unassigned."
            fi

            # Build the assignee JSON snippet only if ASSIGN_TO is non-empty.
            if [ -n "$ASSIGN_TO" ]; then
              ASSIGNEE_JSON=",\"assignee\":{\"accountId\":\"$ASSIGN_TO\"}"
            else
              ASSIGNEE_JSON=""
            fi
                         
              echo "Creating Jira ticket for Commit: $COMMIT assigned to account: $ASSIGN_TO"
              curl --request POST \
                --url "${{ secrets.JIRA_URL }}/rest/api/3/issue" \
                --user "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
                --header "Accept: application/json" \
                --header "Content-Type: application/json" \
                --data '{
                  "fields": {
                    "project": {
                      "key": "'"${{ secrets.JIRA_PROJECT_KEY }}"'"
                    },
                    "summary": "Secrets identified - Commit '"$COMMIT"'",
                    "description": {
                      "type": "doc",
                      "version": 1,
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "GitHub Issue: '"$ISSUE_URL"'\n\nDetails:\nCommit ID: https://github.com/pharmeasy/'"$REPOSITORY"'/commit/'"$COMMIT"'/'"$FILE"'#L'"$LINE"'\nFile Containing Secrets: '"$FILE"'\nLine Containing Issue: '"$LINE"'\nRepository: '"$REPOSITORY"'\nCommitted By: '"$CLEAN_EMAIL"'\n\nSteps to follow:\n1. Rotate the Keys which were being used\n2. Remove the Secrets Identified from codebase\n3. Use void (.env) file to store your secrets."
                            }
                          ]
                        }
                      ]
                    },
                    "issuetype": {
                      "name": "Task"
                    }
                    '"$ASSIGNEE_JSON"',
                    "labels": ["SECBUG", "'"$REPOSITORY"'"]
                  }
                }'
              echo "Jira Ticket Created for Commit: $COMMIT"
            else
              echo "Skipping Jira ticket creation due to missing data for commit: $COMMIT"
            fi
          done < jira_data.txt
