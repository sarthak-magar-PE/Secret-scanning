name: Scan for Secrets with TruffleHog Docker

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronized
      - closed
jobs:
  scan-secrets:
    runs-on: [self-hosted, linux,]
    
    steps: 
      - name: Checkout code (clone repository)
        uses: actions/checkout@v3
        
      - name: Run TruffleHog Scan
        run: |
          docker run --rm -v "$GITHUB_WORKSPACE:/pwd" trufflesecurity/trufflehog:latest git file:///pwd/thyrocare-admin --json > trufflehog_output.json || true
          # For verification
          grep 'SourceMetadata' trufflehog_output.json > cleaned_trufflehog_output.json || true 
          if [ ! -s cleaned_trufflehog_output.json ]; then
            echo "No secrets found, exiting workflow."
            exit 0
          fi
          
          #cat trufflehog_output.json
          cat cleaned_trufflehog_output.json || true
          #cat cleaned_trufflehog_output.json | jq -r '.SourceMetadata.Data.Git.commit, .SourceMetadata.Data.Git.file, .SourceMetadata.Data.Git.repository, .SourceMetadata.Data.Git.email' || true
      - name: Upload cleaned output
        uses: actions/upload-artifact@v3
        with:
          name: cleaned-trufflehog-output
          path: cleaned_trufflehog_output.json


  check-existing-issues:
    runs-on: [self-hosted, linux]
    needs: scan-secrets
    if: success()
    steps:
      - name: Download cleaned output
        uses: actions/download-artifact@v3
        with:
          name: cleaned-trufflehog-output
  
      - name: Check for Existing Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -s cleaned_trufflehog_output.json ]; then
            ISSUES=$(cat cleaned_trufflehog_output.json | jq -r '.SourceMetadata.Data.Git.commit, .SourceMetadata.Data.Git.file, .SourceMetadata.Data.Git.repository, .SourceMetadata.Data.Git.email' | paste - - - -)
            NEW_ISSUES=""
            
            while IFS=$'\t' read -r COMMIT FILE REPOSITORY EMAIL; do
              if [[ -n "$COMMIT" ]]; then
                EXISTING_ISSUE=$(gh issue list --state open --json title --jq ".[] | select(.title | contains(\"$COMMIT\")) | .title")
                if [[ -z "$EXISTING_ISSUE" ]]; then
                  echo "No existing issue for Commit: $COMMIT. Adding to new issues."
                  NEW_ISSUES+="$COMMIT,$FILE,$REPOSITORY,$EMAIL"$'\n'
                else
                  echo "Issue already exists for Commit: $COMMIT. Skipping."
                fi
              fi
            done <<< "$ISSUES"
            if [[ -n "$NEW_ISSUES" ]]; then
              echo "$NEW_ISSUES" > cleaned_new_trufflehog_output.json
            else
              echo "No new issues to create." > no_new_issues.json
            fi
          else
            echo "cleaned_trufflehog_output.json is empty or not found!"
            exit 0
          fi
      - name: Upload new issues
        uses: actions/upload-artifact@v3
        with:
          name: new-issues
          path: cleaned_new_trufflehog_output.json 
          if-no-files-found: ignore


  create-issues:
    runs-on: [self-hosted, linux]
    needs: check-existing-issues  
    if: success()  
  
    steps:
      - name: Download cleaned output
        uses: actions/download-artifact@v3
        with:
          name: new-issues
        continue-on-error: true

      - name: Check if artifact was downloaded
        run: |
          if [ ! -f cleaned_new_trufflehog_output.json ]; then
            echo "Artifact 'new-issues' not found. No new issues to create."
            exit 0
          fi
  
      - name: Create Issues for Secrets Found
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat cleaned_new_trufflehog_output.json || true
          # Check if the cleaned output file exists and is non-empty
          if [ -s cleaned_new_trufflehog_output.json ]; then
            while IFS=',' read -r COMMIT FILE REPOSITORY EMAIL; do
              if [[ -n "$COMMIT" && -n "$FILE" && -n "$REPOSITORY" && -n "$EMAIL" ]]; then
                echo "Creating issue for Commit: $COMMIT"
                gh issue create \
                  --title "Secrets identified - Commit $COMMIT" \
                  --body "**Details:**  
                  **Commit ID:** $COMMIT  
                  **File Containing Secrets:** $FILE  
                  **Repository:** $REPOSITORY  
                  **Committed By:** $EMAIL  
                  Steps to follow:
                  1. Rotate the Keys which were being used
                  2. Remove the Secrets Identified from codebase
                  3. Use void (.env) file to store your secrets." \
                  #--assignee $GITHUB_ACTOR
                  curl -X POST "${{ secrets.GCHAT_WEBHOOK_URL }}" \
                  -H "Content-Type: application/json" \
                  -d '{
                    "text": "*New Secret Issue Created*
                    *Commit ID:* '"$COMMIT"'
                    *File:* '"$FILE"'
                    *Repository:* '"$REPOSITORY"'
                    *Committed By:* '"$EMAIL"'
                    Please check and resolve."
                  }'
                  
              else
                echo "Skipping issue creation due to missing data (Commit: $COMMIT, File: $FILE, Repository: $REPOSITORY, Email: $EMAIL)."
              fi
            done < cleaned_new_trufflehog_output.json
          else
            echo "cleaned_new_trufflehog_output.json is empty or not found! No issues to create."
            exit 0
          fi
